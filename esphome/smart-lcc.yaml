esphome:
  name: smart-lcc
  name_add_mac_suffix: true
  platformio_options:
    board_build.flash_mode: dio
    board_build.f_flash: 40000000L
    board_build.flash_size: 2MB
    board_build.partitions: ../../../partitions-nina.csv
  includes:
    - LambdaSwitch.h
    - LambdaNumber.h
    - LCCUart.h
    - esp-protocol.h

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  baud_rate: 0

uart:
  id: uart_bus
  tx_pin: 1
  rx_pin: 3
  baud_rate: 115200
#  debug:
#    direction: BOTH
#    dummy_receiver: false
#    after:
#      delimiter: "\n"
#    sequence:
#      - lambda: UARTDebug::log_hex(direction, bytes, ' ');

sensor:
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"
  - platform: template
    name: Brew boiler temperature
    id: brew_temp_sensor
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    filters:
      - or:
          - throttle: 20s
          - delta: 0.05
  - platform: template
    name: Service boiler temperature
    id: service_temp_sensor
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    filters:
      - or:
          - throttle: 20s
          - delta: 0.05
  - platform: template
    name: Planned auto-sleep
    id: planned_auto_sleep_sensor
    unit_of_measurement: "min"
    accuracy_decimals: 0
    filters:
      - lambda: return x / 60;
      - or:
          - throttle: 60s
          - delta: 0.45

text_sensor:
  - platform: template
    id: coalesced_state_text_sensor
    name: "State"

binary_sensor:
  - platform: template
    id: water_tank_low_binary_sensor
    name: "Water tank low"
  - platform: template
    id: currently_brewing_binary_sensor
    name: "Currently brewing"
  - platform: template
    id: currently_filling_service_boiler_binary_sensor
    name: "Currently filling service boiler"
    disabled_by_default: true

switch:

custom_component:
  - lambda: |-
      LCCUart *lcc = new LCCUart(id(uart_bus), id(wifi_component));
      lcc->set_brew_boiler_temp(id(brew_temp_sensor));
      lcc->set_service_boiler_temp(id(service_temp_sensor));
      lcc->set_planned_auto_sleep_sensor(id(planned_auto_sleep_sensor));
      lcc->set_coalesced_state_text_sensor(id(coalesced_state_text_sensor));
      lcc->set_water_tank_low_binary_sensor(id(water_tank_low_binary_sensor));
      lcc->set_currently_brewing_binary_sensor(id(currently_brewing_binary_sensor));
      lcc->set_currently_filling_service_boiler_binary_sensor(id(currently_filling_service_boiler_binary_sensor));
      App.register_switch(lcc->ecoModeSwitch);
      App.register_switch(lcc->sleepSwitch);
      App.register_number(lcc->brewTemperatureSetPoint);
      App.register_number(lcc->serviceTemperatureSetPoint);
      App.register_number(lcc->brewTemperatureOffset);
      App.register_number(lcc->autoSleepMinutes);
      return std::vector<esphome::Component*>{lcc};

number:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

#esp32_improv:
#  authorizer: false

wifi:
  id: wifi_component
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Rp2040-Connect Fallback Hotspot"
    password: "ZdlFMCnft8Hc"

captive_portal:

web_server:
  port: 80
  ota: false

# Example configuration entry
light:
  - platform: rgb
    id: on_board_led
    name: "On Board RGB LED"
    red: output_component_r
    green: output_component_g
    blue: output_component_b
    restore_mode: ALWAYS_ON

# Example output entry
output:
  - platform: ledc
    id: output_component_r
    pin: GPIO27
    inverted: true
  - platform: ledc
    id: output_component_g
    pin: GPIO25
    inverted: true
  - platform: ledc
    id: output_component_b
    pin: GPIO26
    inverted: true